def convert(basis_a, num_a, basis_b):
    # Проверяем, что основания систем счисления находятся в допустимом диапазоне
    if not (2 <= basis_a <= 64 and 2 <= basis_b <= 64):
        raise ValueError("Основание системы счисления должно быть в диапазоне от 2 до 64")

    # Проверяем, что число num_a представимо в системе счисления с основанием basis_a
    try:
        # Преобразуем число num_a в десятичное для проверки
        decimal_num_a = int(num_a, basis_a)
    except ValueError:
        raise ValueError("Число num_a не является корректным числом в заданной системе счисления")

    # Переводим десятичное число в систему счисления с основанием basis_b
    result = ''
    if decimal_num_a == 0:
        return '0'

    while decimal_num_a > 0:
        remainder = decimal_num_a % basis_b
        if remainder >= 10:
            # Если остаток больше или равен 10, представляем его как букву
            result = chr(remainder + 55) + result
        else:
            # Иначе, представляем его как цифру
            result = str(remainder) + result
        decimal_num_a //= basis_b

    return result


# Пример использования
basis_a = 16
num_a = '1A'
basis_b = 2
result = convert(basis_a, num_a, basis_b)
print(f"{num_a} в системе счисления с основанием {basis_a} равно {result} в системе с основанием {basis_b}")



# # Пример использования
# basis_a = 16
# num_a = '1A'
# basis_b = 10
# result = convert(basis_a, num_a, basis_b)
# print(f"{num_a} в системе счисления с основанием {basis_a} равно {result} в системе с основанием {basis_b}")

test_cases = [
    # Тестовые данные в десятичной системе счисления
    (10, '123', 2),  # 123 в двоичной системе: 1111011
    (10, '123', 8),  # 123 в восьмеричной системе: 173
    (10, '123', 16), # 123 в шестнадцатеричной системе: 7B
    (10, '123', 10), # 123 в десятичной системе: 123

    # Тестовые данные в двоичной системе счисления
    (2, '101010', 10),  # 101010 в десятичной системе: 42
    (2, '101010', 16),  # 101010 в шестнадцатеричной системе: 2A
    (2, '101010', 8),   # 101010 в восьмеричной системе: 52
    (2, '101010', 2),   # 101010 в двоичной системе: 101010

    # Тестовые данные в шестнадцатеричной системе счисления
    (16, '1A2B', 10),  # 1A2B в десятичной системе: 6699
    (16, '1A2B', 2),   # 1A2B в двоичной системе: 1101001001011
    (16, '1A2B', 8),   # 1A2B в восьмеричной системе: 15413
    (16, '1A2B', 16),  # 1A2B в шестнадцатеричной системе: 1A2B
]

# Проверка тестовых данных
for basis_a, num_a, basis_b in test_cases:
    result = convert(basis_a, num_a, basis_b)
    print(f"{num_a} _ {basis_a} -> {result} _ {basis_b}")
    #print(f"{num_a} в системе счисления с основанием {basis_a} равно {result} в системе с основанием {basis_b}")
